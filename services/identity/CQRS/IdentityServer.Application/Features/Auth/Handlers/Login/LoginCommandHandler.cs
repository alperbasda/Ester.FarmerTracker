//----------- ----------------------------------------------------------------------------
//      This code was generated by a Jumper template tool. 
//---------------------------------------------------------------------------------------
using Core.CrossCuttingConcerns.Exceptions.Types;
using IdentityServer.Application.Features.Auth.Commands.Login;
using IdentityServer.Application.Features.Auth.Rules;
using IdentityServer.Application.Features.UserPasswords.Queries.GetByUserId;
using IdentityServer.Application.Features.UserRefreshTokens.Commands.Create;
using IdentityServer.Application.Features.UserRefreshTokens.Commands.DeleteByUserId;
using IdentityServer.Application.Helpers;
using IdentityServer.Application.Services.Repositories;
using IdentityServer.Domain.Entities;
using MediatR;
using Microsoft.EntityFrameworkCore;


namespace IdentityServer.Application.Features.Auth.Handlers.Login;

public class LoginCommandHandler : IRequestHandler<LoginCommand, LoginResponse>
{
    private readonly IMediator _mediator;
    private readonly IUserDal _userDal;
    private readonly AuthBusinessRules _authBusinessRules;
    private readonly TokenHelper _tokenHelper;
    private readonly IUserRefreshTokenDal _userRefreshTokenDal;
    public LoginCommandHandler(AuthBusinessRules authBusinessRules, IMediator mediator, TokenHelper tokenHelper, IUserDal userDal, IUserRefreshTokenDal userRefreshTokenDal)
    {
        _authBusinessRules = authBusinessRules;
        _mediator = mediator;
        _tokenHelper = tokenHelper;
        _userDal = userDal;
        _userRefreshTokenDal = userRefreshTokenDal;
    }

    public async Task<LoginResponse> Handle(LoginCommand request, CancellationToken cancellationToken)
    {
        var user = await _userDal.GetAsync(w => w.NormalizedUserName == request.UserName.Trim().ToLower(),
            include: w => w
                            .Include(q => q.Clients.Where(w => w.DeletedTime == null))
                            .Include(q => q.UserScopes.Where(w => w.DeletedTime == null))
                            .Include(q => q.Roles.Where(w => w.DeletedTime == null)), cancellationToken: cancellationToken,enableTracking:false);

        _authBusinessRules.ThrowUserNotFoundException(user);

        _ = await _mediator.Send(new GetByUserIdUserPasswordQuery { UserId = user!.Id, PasswordStr = request.Password.Trim() });

        await _authBusinessRules.FillAllScope(user);

        var token = await _tokenHelper.CreateUserToken(user);



        var refreshToken = await _userRefreshTokenDal.GetAsync(w => w.UserId == user.Id);
        if (refreshToken == null)
        {
            refreshToken = new UserRefreshToken
            {
                Id = Guid.NewGuid(),
                UserId = user.Id,
                CreatedTime = DateTime.UtcNow,
                Expiration = DateTime.UtcNow.AddDays(7),
                Code = token.RefreshToken
            };
            await _userRefreshTokenDal.AddAsync(refreshToken);
        }
        else
        {
            refreshToken.Expiration = DateTime.UtcNow.AddDays(7);
            refreshToken.Code = token.RefreshToken;
            await _userRefreshTokenDal.UpdateAsync(refreshToken);
        }



        return token;

    }
}
