
//---------------------------------------------------------------------------------------
//      This code was generated by a Jumper tool. 
//      Runtime version : 1.0
//      Generation Time : 23.10.2023 11:28
//---------------------------------------------------------------------------------------

using AutoMapper;
using Core.ApiHelpers.JwtHelper.Models;
using Core.CrossCuttingConcerns.Exceptions.Types;
using IdentityServer.Application.Features.Auth.Commands.Login;
using IdentityServer.Application.Features.Auth.Rules;
using IdentityServer.Application.Features.UserRefreshTokens.Commands.Create;
using IdentityServer.Application.Features.UserRefreshTokens.Commands.DeleteByUserId;
using IdentityServer.Application.Features.Users.Commands.Update;
using IdentityServer.Application.Features.Users.Rules;
using IdentityServer.Application.Helpers;
using IdentityServer.Application.Services.Repositories;
using MediatR;
using Microsoft.EntityFrameworkCore;
namespace IdentityServer.Application.Features.Users.Handlers.Commands.Update;

public class UpdateUserCommandHandler : IRequestHandler<UpdateUserCommand, LoginResponse>
{
    private readonly IUserDal _userDal;
    private readonly UserBusinessRules _userBusinessRules;
    private readonly IMapper _mapper;
    private readonly TokenParameters _tokenParameters;
    private readonly AuthBusinessRules _authBusinessRules;
    private readonly TokenHelper _tokenHelper;
    private readonly IMediator _mediator;
    public UpdateUserCommandHandler(IMapper mapper, IUserDal userDal, UserBusinessRules userBusinessRules, TokenParameters tokenParameters, AuthBusinessRules authBusinessRules, TokenHelper tokenHelper, IMediator mediator)
    {
        _mapper = mapper;
        _userDal = userDal;
        _userBusinessRules = userBusinessRules;
        _tokenParameters = tokenParameters;
        _authBusinessRules = authBusinessRules;
        _tokenHelper = tokenHelper;
        _mediator = mediator;
    }

    public async Task<LoginResponse> Handle(UpdateUserCommand request, CancellationToken cancellationToken)
    {
        if (request.PhoneNumber != "5555555555" && await _userDal.AnyAsync(w => w.PhoneNumber == request.PhoneNumber && w.Id != request.Id))
        {
            throw new BusinessException("Telefon Numarası Önceden Kayıt Edilmiş.");
        }
        if (await _userDal.AnyAsync(w => w.NormalizedMailAddress == request.NormalizedMailAddress && w.Id != request.Id))
        {
            throw new BusinessException("Mail Adresi Önceden Kayıt Edilmiş.");
        }

        var data = await _userDal.GetAsync(w => w.Id == _tokenParameters.UserId,
            include: w => w
                            .Include(q => q.Clients.Where(w => w.DeletedTime == null))
                            .Include(q => q.UserScopes.Where(w => w.DeletedTime == null))
                            .Include(q => q.Roles.Where(w => w.DeletedTime == null)), cancellationToken: cancellationToken, enableTracking: false);

        _userBusinessRules.ThrowExceptionIfDataNull(data);

        _mapper.Map(request, data);
        await _userDal.UpdateAsync(data!);

        await _authBusinessRules.FillAllScope(data!);

        var token = await _tokenHelper.CreateUserToken(data!);
        _ = await _mediator.Send(new DeleteByUserIdRefreshTokenCommand { UserId = data!.Id }, cancellationToken);
        _ = await _mediator.Send(new CreateUserRefreshTokenCommand { Code = token.RefreshToken, Expiration = DateTime.UtcNow.AddDays(7), UserId = data.Id }, cancellationToken);

        return token;
    }
}



