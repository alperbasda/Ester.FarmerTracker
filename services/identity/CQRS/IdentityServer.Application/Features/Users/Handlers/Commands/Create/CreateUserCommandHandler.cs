
//---------------------------------------------------------------------------------------
//      This code was generated by a Jumper tool. 
//      Runtime version : 1.0
//      Generation Time : 23.10.2023 11:28
//---------------------------------------------------------------------------------------

using AutoMapper;
using Core.CrossCuttingConcerns.Exceptions.Types;
using Core.CrossCuttingConcerns.Helpers.HashHelpers;
using IdentityServer.Application.Features.Users.Commands.Create;
using IdentityServer.Application.Features.Users.Rules;
using IdentityServer.Application.Services.Repositories;
using IdentityServer.Domain.Entities;
using MediatR;
namespace IdentityServer.Application.Features.Users.Handlers.Commands.Create;

public class CreateUserCommandHandler : IRequestHandler<CreateUserCommand, CreateUserResponse>
{
    private readonly IUserDal _userDal;
    private readonly UserBusinessRules _userBusinessRules;
    private readonly IMapper _mapper;

    public CreateUserCommandHandler(IMapper mapper, IUserDal userDal, UserBusinessRules userBusinessRules)
    {
        _mapper = mapper;
        _userDal = userDal;
        _userBusinessRules = userBusinessRules;
    }

    public async Task<CreateUserResponse> Handle(CreateUserCommand request, CancellationToken cancellationToken)
    {
        request.UserName = request.UserName.Trim();
        request.FirstName = request.FirstName.Trim();
        request.LastName = request.LastName.Trim();
        if (request.PhoneNumber != "5555555555" && await _userDal.AnyAsync(w => w.PhoneNumber == request.PhoneNumber))
        {
            throw new BusinessException("Telefon Numarası Önceden Kayıt Edilmiş.");
        }
        if (await _userDal.AnyAsync(w => w.NormalizedMailAddress == request.NormalizedMailAddress))
        {
            throw new BusinessException("Mail Adresi Önceden Kayıt Edilmiş.");
        }
        if (await _userDal.AnyAsync(w => w.NormalizedUserName == request.NormalizedUserName))
        {
            throw new BusinessException("Kullanıcı Adı Önceden Kayıt Edilmiş.");
        }

        var data = _mapper.Map<User>(request);
        byte[] hash, salt;
        HashingHelper.CreatePasswordHash(request.Password.Trim(), out hash, out salt);
        data.UserScopes = new List<UserScope>
        {
            new UserScope
            {
                Id = Guid.NewGuid(),
                CreatedTime = DateTime.UtcNow,
                Expiration = null,
                Scope = "nuraymind_user_scope"
            }
        };
        data.UserPasswords = new List<UserPassword>
        {
        new UserPassword
        {
            Id = Guid.NewGuid(),
            CreatedTime= DateTime.UtcNow,
            Password = hash,
            PasswordSalt = salt,
        }
        };

        _userBusinessRules.SetId(data);
        //İş Kurallarınızı Burada Çağırabilirsiniz.

        await _userDal.AddAsync(data);

        return _mapper.Map<CreateUserResponse>(data);
    }
}



