
//---------------------------------------------------------------------------------------
//      This code was generated by a Jumper tool. 
//      Runtime version : 1.0
//      Generation Time : 23.10.2023 11:28
//---------------------------------------------------------------------------------------

using AutoMapper;
using Core.CrossCuttingConcerns.Exceptions.Types;
using IdentityServer.Application.Features.Users.Queries.GetByUserName;
using IdentityServer.Application.Features.Users.Rules;
using IdentityServer.Application.Services.Repositories;
using IdentityServer.Domain.Entities;
using MediatR;
using System.Security.Cryptography;
namespace IdentityServer.Application.Features.Users.Handlers.Queries.GetByMailAddress;

public class GetByMailAddressUserQueryHandler : IRequestHandler<GetByMailAddressUserQuery, GetByMailAddressUserResponse>
{
    private readonly IUserDal _userDal;
    private readonly UserBusinessRules _userBusinessRules;
    private readonly IMapper _mapper;

    public GetByMailAddressUserQueryHandler(IMapper mapper, IUserDal userDal, UserBusinessRules userBusinessRules)
    {
        _mapper = mapper;
        _userDal = userDal;
        _userBusinessRules = userBusinessRules;
    }

    public async Task<GetByMailAddressUserResponse> Handle(GetByMailAddressUserQuery request, CancellationToken cancellationToken)
    {
        var data = await _userDal.GetAsync(w => w.NormalizedMailAddress == request.MailAddress.ToLower(), cancellationToken: cancellationToken);
        Random random = new Random();

        if(data == null)
        {
            throw new  BusinessException("Kullanýcý Bulunamadý");
        }
        data.CompanyName = random.Next(1000, 10000).ToString();

        await _userDal.UpdateAsync(data);

        return _mapper.Map<GetByMailAddressUserResponse>(data);
    }
}



